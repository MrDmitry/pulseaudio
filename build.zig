const std = @import("std");

pub fn build(b: *std.build.Builder) void {
    const target = b.standardTargetOptions(.{});
    const mode = b.standardReleaseOptions();

    const lib = b.addStaticLibrary("pulse", null);
    lib.setTarget(target);
    lib.setBuildMode(mode);
    lib.linkLibC();
    lib.addIncludePath("src");
    lib.addCSourceFiles(&.{
        "src/pulse/channelmap.c",
        "src/pulse/client-conf.c",
        "src/pulse/context.c",
        "src/pulse/direction.c",
        "src/pulse/error.c",
        "src/pulse/ext-device-manager.c",
        "src/pulse/ext-device-restore.c",
        "src/pulse/ext-stream-restore.c",
        "src/pulse/fork-detect.c",
        "src/pulse/format.c",
        "src/pulse/introspect.c",
        "src/pulse/mainloop-api.c",
        "src/pulse/mainloop-signal.c",
        "src/pulse/mainloop.c",
        "src/pulse/operation.c",
        "src/pulse/proplist.c",
        "src/pulse/rtclock.c",
        "src/pulse/sample.c",
        "src/pulse/scache.c",
        "src/pulse/stream.c",
        "src/pulse/subscribe.c",
        "src/pulse/thread-mainloop.c",
        "src/pulse/timeval.c",
        "src/pulse/utf8.c",
        "src/pulse/util.c",
        "src/pulse/volume.c",
        "src/pulse/xmalloc.c",
        "src/pulsecore/arpa-inet.c",
        "src/pulsecore/aupdate.c",
        "src/pulsecore/authkey.c",
        "src/pulsecore/bitset.c",
        "src/pulsecore/conf-parser.c",
        "src/pulsecore/core-error.c",
        "src/pulsecore/core-format.c",
        "src/pulsecore/core-rtclock.c",
        "src/pulsecore/core-util.c",
        "src/pulsecore/dynarray.c",
        "src/pulsecore/fdsem.c",
        "src/pulsecore/flist.c",
        "src/pulsecore/g711.c",
        "src/pulsecore/hashmap.c",
        "src/pulsecore/i18n.c",
        "src/pulsecore/idxset.c",
        "src/pulsecore/iochannel.c",
        "src/pulsecore/ioline.c",
        "src/pulsecore/ipacl.c",
        "src/pulsecore/lock-autospawn.c",
        "src/pulsecore/log.c",
        "src/pulsecore/mcalign.c",
        "src/pulsecore/memblock.c",
        "src/pulsecore/memblockq.c",
        "src/pulsecore/memchunk.c",
        "src/pulsecore/memtrap.c",
        "src/pulsecore/mutex-posix.c",
        "src/pulsecore/native-common.c",
        "src/pulsecore/once.c",
        "src/pulsecore/packet.c",
        "src/pulsecore/parseaddr.c",
        "src/pulsecore/pdispatch.c",
        "src/pulsecore/pid.c",
        "src/pulsecore/pipe.c",
        "src/pulsecore/proplist-util.c",
        "src/pulsecore/pstream-util.c",
        "src/pulsecore/pstream.c",
        "src/pulsecore/queue.c",
        "src/pulsecore/random.c",
        "src/pulsecore/ratelimit.c",
        "src/pulsecore/sample-util.c",
        "src/pulsecore/semaphore-posix.c",
        "src/pulsecore/shm.c",
        "src/pulsecore/socket-client.c",
        "src/pulsecore/socket-server.c",
        "src/pulsecore/socket-util.c",
        "src/pulsecore/srbchannel.c",
        "src/pulsecore/strbuf.c",
        "src/pulsecore/strlist.c",
        "src/pulsecore/tagstruct.c",
        "src/pulsecore/thread-posix.c",
        "src/pulsecore/time-smoother.c",
        "src/pulsecore/tokenizer.c",
        "src/pulsecore/usergroup.c",
    }, &.{
        "-std=gnu11",
        "-DHAVE_CONFIG_H=1",
        "-D_GNU_SOURCE",
    });
    lib.install();
    lib.installHeadersDirectoryOptions(.{
        .source_dir = "src/pulse",
        .install_dir = .header,
        .install_subdir = "pulse",
        .exclude_extensions = &.{".c"},
    });
}
